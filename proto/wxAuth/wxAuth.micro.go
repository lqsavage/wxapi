// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/wxAuth/wxAuth.proto

/*
Package wxAuth is a generated protocol buffer package.

It is generated from these files:
	proto/wxAuth/wxAuth.proto

It has these top-level messages:
	WxAuthTicketSaveRequest
	WxAuthTicketSaveResponse
	WxAuthTicketGetRequest
	WxAuthTicketGetResponse
*/
package wxAuth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for WxAuth service

type WxAuthService interface {
	SaveTicket(ctx context.Context, in *WxAuthTicketSaveRequest, opts ...client.CallOption) (*WxAuthTicketSaveResponse, error)
	GetTicket(ctx context.Context, in *WxAuthTicketGetRequest, opts ...client.CallOption) (*WxAuthTicketGetResponse, error)
}

type wxAuthService struct {
	c    client.Client
	name string
}

func NewWxAuthService(name string, c client.Client) WxAuthService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "wxauth"
	}
	return &wxAuthService{
		c:    c,
		name: name,
	}
}

func (c *wxAuthService) SaveTicket(ctx context.Context, in *WxAuthTicketSaveRequest, opts ...client.CallOption) (*WxAuthTicketSaveResponse, error) {
	req := c.c.NewRequest(c.name, "WxAuth.SaveTicket", in)
	out := new(WxAuthTicketSaveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxAuthService) GetTicket(ctx context.Context, in *WxAuthTicketGetRequest, opts ...client.CallOption) (*WxAuthTicketGetResponse, error) {
	req := c.c.NewRequest(c.name, "WxAuth.GetTicket", in)
	out := new(WxAuthTicketGetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WxAuth service

type WxAuthHandler interface {
	SaveTicket(context.Context, *WxAuthTicketSaveRequest, *WxAuthTicketSaveResponse) error
	GetTicket(context.Context, *WxAuthTicketGetRequest, *WxAuthTicketGetResponse) error
}

func RegisterWxAuthHandler(s server.Server, hdlr WxAuthHandler, opts ...server.HandlerOption) error {
	type wxAuth interface {
		SaveTicket(ctx context.Context, in *WxAuthTicketSaveRequest, out *WxAuthTicketSaveResponse) error
		GetTicket(ctx context.Context, in *WxAuthTicketGetRequest, out *WxAuthTicketGetResponse) error
	}
	type WxAuth struct {
		wxAuth
	}
	h := &wxAuthHandler{hdlr}
	return s.Handle(s.NewHandler(&WxAuth{h}, opts...))
}

type wxAuthHandler struct {
	WxAuthHandler
}

func (h *wxAuthHandler) SaveTicket(ctx context.Context, in *WxAuthTicketSaveRequest, out *WxAuthTicketSaveResponse) error {
	return h.WxAuthHandler.SaveTicket(ctx, in, out)
}

func (h *wxAuthHandler) GetTicket(ctx context.Context, in *WxAuthTicketGetRequest, out *WxAuthTicketGetResponse) error {
	return h.WxAuthHandler.GetTicket(ctx, in, out)
}
